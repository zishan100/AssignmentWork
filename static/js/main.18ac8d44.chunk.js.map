{"version":3,"sources":["component/ButtonCom/button.js","component/ToDoInput/todoinput.js","component/List/list.js","component/ToDoTask/todotask.js","component/AlertMsg/AlertMsg.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","color","marginRight","type","onClick","ClearList","value","TodoInput","_this$props","this","handleChange","handleSubmit","item","editItem","class","onSubmit","placeholder","onChange","edit","ButtonCom_button","Component","List","_ref","title","handleEdit","handleDelete","TodoTask","map","id","list","key","console","log","AlertMsg","message","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","setState","target","preventDefault","Items","JSON","parse","localStorage","getItem","state","alertMsg","ShowAlert","items","setItem","stringify","newItem","uuidv1","updatedItem","toConsumableArray","alertmsg","setTimeout","filter","find","removeItem","component_AlertMsg_AlertMsg","todoinput","todotask","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.18ac8d44.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './buttonStyle.css';\r\n\r\nconst Button = (props) => {\r\n    \r\n    return (\r\n        <div className='btn-container'>\r\n            <button className={`${props.color} ${props.marginRight ? 'marginRight' : ''} btn`} type={props.type}\r\n            onClick={props.ClearList}\r\n            >\r\n                {props.value}\r\n                \r\n            </button> \r\n          \r\n        </div>\r\n     \r\n    ) \r\n\r\n\r\n}\r\n\r\nexport default Button; \r\n","import React,{Component} from 'react';\r\n\r\nimport './todoinputStyle.css'\r\nimport Button from '../ButtonCom/button';\r\n\r\nclass TodoInput extends Component{\r\n   \r\n  \r\n  render(){\r\n    const { handleChange, handleSubmit, item, editItem } = this.props;\r\n    // console.log(editItem);\r\n       return (\r\n        <div class='todoinput'>\r\n        <form onSubmit={handleSubmit}>\r\n        <div class='group-input'>\r\n                       \r\n         <input type='text' placeholder='Add A ToDo Item' value={item} onChange={handleChange} />           \r\n        </div>\r\n             \r\n        {\r\n            editItem.edit ?\r\n          <Button type='submit'     color='green'\r\n              value='Edit Item' /> :\r\n             <Button type='submit' color='green'\r\n                   value='Add Item' />      \r\n               \r\n         }    \r\n        </form>  \r\n      </div>        \r\n  ); \r\n\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default TodoInput;","import React from 'react';\r\n\r\n\r\nimport './listStyle.css';\r\n\r\n\r\nconst List = ({title,handleEdit,handleDelete}) => {\r\n    \r\n   return (\r\n       <div className='list-item'>\r\n         <p>{title}</p>\r\n         \r\n        <div className='button-container'>\r\n        <button type='button'  className='edit' onClick={handleEdit}>Edit</button>\r\n            <button type='button' className='delete'\r\n             onClick={handleDelete}\r\n            >Delete</button>    \r\n        </div>\r\n       \r\n       </div>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport List from '../List/list';\r\nimport Button from '../ButtonCom/button';\r\nimport './todotaskStyle.css';\r\nclass TodoTask extends Component{\r\n\r\n\r\n    render() {\r\n        const { item,handleEdit,handleDelete,ClearList} = this.props;\r\n        return (\r\n        <div className='todoTask'>\r\n          <h4 className='task-heading'>ToDo List\r\n         </h4>\r\n            \r\n         <div className='render-list'>\r\n          \r\n          {\r\n          item.map(({id,title })=> \r\n              <List\r\n                  key={id} title={title}\r\n                  handleEdit={() => handleEdit(id)\r\n                  }\r\n              handleDelete={() => {\r\n                     handleDelete(id);\r\n                     console.log(\" This Delete Method Called\")\r\n                  }}\r\n                 />)               \r\n         } \r\n          </div>       \r\n       <div className='container'>\r\n                    <Button color='color' type='submit' value='Clear List' ClearList={ClearList}/>        \r\n       </div>\r\n              \r\n     </div> \r\n        ); \r\n      \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default TodoTask;\r\n\r\n","import React from 'react';\r\n\r\nimport './AlertStyle.css';\r\n\r\nconst AlertMsg = ({ message }) => (\r\n    <div className='alertmsg'>\r\n        <p className='msg'>{message}</p>  \r\n    </div>\r\n      \r\n);\r\n\r\n\r\nexport default AlertMsg;\r\n\r\n\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport TodoInput from './component/ToDoInput/todoinput'\nimport TodoTask from './component/ToDoTask/todotask'\nimport AlertMsg from './component/AlertMsg/AlertMsg';\nimport { v1 as uuidv1 } from 'uuid';\n/* Here is Class Based Component to Pass Data Using State Property*/\nclass App extends Component {\n  constructor () {\n    super();\n    \n    this.state = {\n    items: [],\n    item: '',\n      editItem: {\n        edit: false,\n        id:'' \n      },\n    alertMsg: false,\n    message:''\n  }    \n  }\n  \n  \n  componentDidMount() {\n    const Items = JSON.parse(localStorage.getItem('item')) || [];\n    \n    this.setState({\n       items:Items\n    }) \n  }\n     \n\n  handleChange = (e) => {\n    // console.log(e.target.value);    \n    this.setState({\n     item:e.target.value\n   })      \n\n  } \n\n\n  handleSubmit = (e) => {\n    \n    e.preventDefault();\n  \n    console.log('handle Submit');\n    \n    let Items = [];\n    \n    Items = JSON.parse(localStorage.getItem('item')) || [];\n    if (this.state.item === '')\n    {\n      this.setState({\n        alertMsg: true,\n        message:\"Empty Input Value Cannot Be Accepted!\"\n      }) \n      this.ShowAlert();\n      return;  \n    }\n    if(this.state.editItem.edit === true) {\n                 \n      console.log(this.state.editItem);\n      Items = Items.map((item) => {\n          \n        return item.id === this.state.editItem.id ?\n          {\n            title: this.state.item,\n            id:item.id\n          } : item;\n       }) \n       this.setState({\n       items:Items,\n       editItem: false,\n       item: \"\",\n       alertMsg: true,\n       message:'Edited New Items Successfully'\n       })\n        this.ShowAlert(); \n      localStorage.setItem('item', JSON.stringify(Items));  \n      \n      return;\n    }\n  \n    const newItem = {\n      title: this.state.item,\n      id:uuidv1()\n    }\n    \n    const updatedItem = [...Items, newItem];\n    \n    this.setState({\n      items: updatedItem,\n      editItem: false,\n      item: \"\",\n      alertMsg: true,\n      message:'Added New Items Successfully'\n    })\n     \n    this.ShowAlert(); \n     \n  localStorage.setItem('item', JSON.stringify(updatedItem));\n    console.log(updatedItem);\n       \n    \n    \n  }\n\n  ShowAlert=(alertmsg)=> {\n    \n    setTimeout(() => {\n      this.setState({\n        alertMsg: false,\n        message:''\n      })  \n    }, 3000); \n\n  }\n  /* Delete Item  */\n  handleDelete = (id) => {\n    const updatedItem = this.state.items.filter(item => item.id!==id)  \n    this.setState({\n      items: updatedItem,\n    })\n    localStorage.setItem('item', JSON.stringify(updatedItem));\n    \n  }\n  \n  /* Edit Item function */\n  handleEdit = (id) => {\n    console.log(id);   \n\n    const editItem = this.state.items.find(item => item.id === id)\n    \n    // const updatedItem = this.state.items.filter(item => item.id!==id)  \n    this.setState({\n      item: editItem.title,\n      editItem: {\n        edit: true,\n        id: editItem.id\n      },\n    })\n    // localStorage.setItem('item', JSON.stringify(updatedItem));\n  }\n\n/* Clear List */\n ClearList = () => {\n     \n   this.setState({\n     items:[]\n   })\n   localStorage.removeItem('item');\n}  \n  \n  \n  render() {\n    \n    return (\n      <div className=\"App\">\n        <h4>To Do App</h4>\n        {\n          this.state.alertMsg ?\n            <AlertMsg  message={this.state.message} /> : null  \n        }\n         \n        \n        <TodoInput item={ this.state.item }\n          handleSubmit={ this.handleSubmit } handleChange={ this.handleChange }\n          editItem={this.state.editItem}\n        />\n        <TodoTask\n          handleEdit={this.handleEdit}\n          key={this.state.items.id}\n          item={this.state.items}\n          handleDelete={this.handleDelete}\n          ClearList={this.ClearList}\n         />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  App  from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}